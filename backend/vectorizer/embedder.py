from sentence_transformers import SentenceTransformer
import numpy as np
from typing import List, Union
import logging

logger = logging.getLogger(__name__)

class SkillEmbedder:
    """
    Handles text embedding using SentenceTransformer for skill recommendations
    """
    
    def __init__(self, model_name: str = "sentence-transformers/all-MiniLM-L6-v2"):
        """
        Initialize the embedder with a specific model
        
        Args:
            model_name: HuggingFace model name for sentence embeddings
        """
        try:
            self.model = SentenceTransformer(model_name)
            self.model_name = model_name
            logger.info(f"Initialized embedder with model: {model_name}")
        except Exception as e:
            logger.error(f"Failed to initialize embedder: {e}")
            raise
    
    def embed_text(self, text: Union[str, List[str]]) -> np.ndarray:
        """
        Generate embeddings for text or list of texts
        
        Args:
            text: Single text string or list of text strings
            
        Returns:
            numpy array of embeddings
        """
        try:
            if isinstance(text, str):
                text = [text]
            
            embeddings = self.model.encode(text, convert_to_numpy=True)
            logger.debug(f"Generated embeddings for {len(text)} texts")
            return embeddings
        except Exception as e:
            logger.error(f"Failed to generate embeddings: {e}")
            raise
    
    def embed_skills(self, skills: List[str]) -> np.ndarray:
        """
        Generate embeddings for a list of skills
        
        Args:
            skills: List of skill names
            
        Returns:
            numpy array of skill embeddings
        """
        return self.embed_text(skills)
    
    def embed_role_description(self, role: str, skills: List[str]) -> np.ndarray:
        """
        Generate embedding for role + skills combination
        
        Args:
            role: Job role/title
            skills: List of skills
            
        Returns:
            numpy array of combined embedding
        """
        combined_text = f"{role}: {', '.join(skills)}"
        return self.embed_text(combined_text)
    
    def get_embedding_dimension(self) -> int:
        """
        Get the dimension of embeddings generated by the model
        
        Returns:
            Embedding dimension
        """
        return self.model.get_sentence_embedding_dimension()
    
    def similarity(self, embedding1: np.ndarray, embedding2: np.ndarray) -> float:
        """
        Calculate cosine similarity between two embeddings
        
        Args:
            embedding1: First embedding vector
            embedding2: Second embedding vector
            
        Returns:
            Cosine similarity score
        """
        try:
            # Normalize vectors
            norm1 = np.linalg.norm(embedding1)
            norm2 = np.linalg.norm(embedding2)
            
            if norm1 == 0 or norm2 == 0:
                return 0.0
            
            # Calculate cosine similarity
            similarity = np.dot(embedding1, embedding2) / (norm1 * norm2)
            return float(similarity)
        except Exception as e:
            logger.error(f"Failed to calculate similarity: {e}")
            return 0.0 